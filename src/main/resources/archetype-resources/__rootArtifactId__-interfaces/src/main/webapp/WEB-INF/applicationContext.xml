<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
#if($configType.contains('xml:'))
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:cache="http://www.springframework.org/schema/cache"
#if($frameworks.contains('rabbitmq'))
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
#end
#end
#if(!$configType.contains('xml:'))
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
#{else}
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd#if(!$frameworks.contains('rabbitmq'))">#{else}
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">#{end}
#end
#if($showDefault)
    <bean id="environment" scope="singleton" class="org.springframework.core.env.StandardEnvironment" #if(!$showComment)/>#{else}>
        <description>If WebApplicationContext, bean type is 'org.springframework.web.context.support.StandardServletEnvironment'</description>
    </bean>
#{end}
#end
#if($showComment)
    <!--
    <bean id="loadTimeWeaver" class="org.springframework.context.weaving.DefaultContextLoadTimeWeaver">
        <description>Use spring javaagent as a delegate to others, like aspectj, web/ejb containers.
        See org.springframework.context.support.AbstractApplicationContext#prepareBeanFactory</description>
    </bean>
    <bean id="systemProperties" scope="singleton" class="java.lang.System" factory-method="getProperties">
        <description>System.getProperties(). Can't invoke static method.</description>
    </bean>
    <bean id="systemEnvironment" scope="singleton" class="java.lang.System" factory-method="getEnv">
        <description>System.getEnv() or empty if suppressGetenv. Can't invoke static mehtod</description>
    </bean>
    <bean id="messageSource" scope="singleton" class="org.springframework.context.support.DelegatingMessageSource">
        <description>See org.springframework.context.support.AbstractApplicationContext#initMessageSource. Can't setParentMessageSource</description>
    </bean>
    <bean id="applicationEventMulticaster" class="org.springframework.context.event.SimpleApplicationEventMulticaster">
        <description>See org.springframework.context.support.AbstractApplicationContext#initApplicationEventMulticaster.
        No consurct-arg.</description>
    </bean>
    <bean id="themeSource" class="" />
    <bean id="conversionService" class="" />
    <bean id="lifecycleProcessor" scope="singleton" class="org.springframework.context.support.DefaultLifecycleProcessor">
        <description>See org.springframework.context.support.AbstractApplicationContext#initLifecycleProcessor. Can't setBeanFactory!</description>
    </bean>
    -->
#end
#if(($configType.contains('xml:') and $showDefault) or ($configType.contains('@') and !$configType.contains('@java') and !$configType.contains('xml:')))
    <bean id="org.springframework.context.annotation.internalConfigurationAnnotationProcessor"
          class="org.springframework.context.annotation.ConfigurationClassPostProcessor"#if(!$showComment)/>#{else}>
        <description>Parse each @Configuration class; Handle any @PropertySource annotations</description>
    </bean>
#{end}
    <bean id="org.springframework.context.annotation.internalAutowiredAnnotationProcessor"
          class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"#if(!$showComment)/>#{else}>
        <description>Handle @Autowired, @Value, @Inject on field or method</description>
#if($showDefault)
        <property name="requiredParameterName" value="required" />
        <property name="requiredParameterValue" value="true" />
        <property name="order" value="2147483645" />
#end
    </bean>
#{end}
    <bean id="org.springframework.context.annotation.internalRequiredAnnotationProcessor"
          class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"#if(!$showComment)/>#{else}>
        <description>Check setter method with @Required annotation.</description>
    </bean>
#{end}
    <bean id="org.springframework.context.annotation.internalCommonAnnotationProcessor"
          class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"#if(!$showComment)/>#{else}>
        <description>Look up field or method with @javax.xml.ws.WebServiceRef, @javax.ejb.EJB, @Resource annotation and inject to it.</description>
    </bean>
#{end}
    <bean id="org.springframework.aop.config.internalAutoProxyCreator"
          class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator">
#if($showComment)
        <description></description>
#{end}
        <property name="order" value="-2147483648" />
        <property name="proxyTargetClass" value="false" />
        <property name="exposeProxy" value="false" />
    </bean>
#end

#if($configType.contains('xml:') or ($configType.contains('@') and !$configType.contains('@java')))
#if($configType.contains('xml:') and $showComment)
    <!--
#if($showDefault)
    <bean id="org.springframework.context.config.internalBeanConfigurerAspect"
        class="org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect" factoy-method="aspectOf">
        <description></description>
    </bean>
#end
    <context:property-override location="application.properties"#if($showDefault) ignore-resource-not-found="false" local-override="false" #{end}>
        <description>Define bean which class is 'org.springframework.beans.factory.config.PropertyOverrideConfigurer'.
        Override bean property by load properties file.</description>
    </context:property-override>

    <context:load-time-weaver #if($showDefault)weaver-class="org.springframework.context.weaving.DefaultContextLoadTimeWeaver"#{end}
        aspectj-weaving="off">
        <description></description>
    </context:load-time-weaver>
    <context:spring-configured>
        <description>Define bean named 'org.springframework.context.config.internalBeanConfigurerAspect'
        with class named 'org.springframework.beans.factory.aspectj.AnnotationBeanConfigurerAspect'</description>
    </context:spring-configured>
    <context:mbean-export>
        <description>Define a bean named 'mbeanExporter',it's class is 'org.springframework.jmx.export.annotation.AnnotationMBeanExporter'.
        Default value of property 'registrationPolicy' is 'FAIL_ON_EXISTING'</description>
    </context:mbean-export>
    <context:mbean-server>
        <description>Define a bean named 'mbeanServer', it's class is 'org.springframework.jmx.support.MBeanServerFactoryBean'.</description>
    </context:mbean-server>
    -->
#end
#if($showComment)
    <!-- Create org.springframework.context.annotation.ClassPathBeanDefinitionScanner to scan classses.
    As enhanced pattern of &#60;context:annotation-config /&#62;, it defines
    org.springframework.context.annotation.ConfigurationClassPostProcessor,
    org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor,
    org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor,
    org.springframework.context.annotation.CommonAnnotationBeanPostProcessor,
    org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor,
    org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor.
    -->
#end
    <context:component-scan base-package="${groupId}.${rootArtifactId}" use-default-filters="true" #if($showDefault)annotation-config="true"#{end}>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
    </context:component-scan>
#end
#if($configType.contains('xml:') and $showComment)
    <!--
    <aop:config proxy-target-class="false" expose-proxy="false">
        <description>Define a bean named 'org.springframework.aop.config.internalAutoProxyCreator' when not defined.
         It's class name is 'org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator'.
         If proxy-target-class is true, Spring use CGLIB.
         If  expose-proxy is true, we can use 'org.springframework.aop.framework.AopContext#currentProxy'to get delegate object.
         <description>
         <aop:pointcut expression="">
            <description>Define a prototype bean with class 'org.springframework.aop.aspectj.AspectJExpressionPointcut'</description>
         </aop:pointcut>
         <aop:advisor advice-ref="adviceBeanName" pointcut-ref="">
            <description>Define a bena with class 'org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor'.
            Attribute 'pointcut' and 'pointcut-ref' cannot occur same time!
            </description>
         </aop:advisor>
         <aop:aspect>
            <description>Define bean class is 'org.springframework.aop.config.MethodLocatingFactoryBean'.
            Define bean class is 'org.springframework.aop.config.SimpleBeanFactoryAwareAspectInstanceFactory'.
            Define bean which is sub class of 'org.springframework.aop.aspectj.AbstractAspectJAdvice'.
            Define bean class name is 'org.springframework.aop.aspectj.AspectJPointcutAdvisor'.</description>
            <aop:before method="" pointcut="" />
            <aop:after method="" pointcut-ref="" />
            <aop:after-returning method="" pointcut="" />
            <aop:after-throwing method="" pointcut="" />
            <aop:around method="" pointcut="" />
            <aop:pointcut expression="" />
         </aop:aspect>
    </aop:config>
    <aop:scoped-proxy #if($showDefault)proxy-target-class="true"#{end}>
        <description>Decorate given bean, replace with a new bean which name start with 'scopedTarget.'
         and class name is 'org.springframework.aop.scope.ScopedProxyFactoryBean'</description>
    </aop:scoped-proxy>
    -->
#end
#if($configType.contains('xml:') and $configType.contains('@java'))
#if($showComment)
    <!-- Define a bean named 'org.springframework.aop.config.internalAutoProxyCreator' when not defined.
    It's class name is 'org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator'
    -->
#{end}
    <aop:aspectj-autoproxy #if($showDefault)proxy-target-class="false" expose-proxy="false"#{end} />

#end
#if($showComment)
    <!--
    <tx:advice #if($showDefault)transaction-manager="transactionManager"#{end}>
        <description>Define bean which type is 'org.springframework.transaction.interceptor.TransactionInterceptor'</description>
#if($showDefault)
        <tx:attributes>
            <tx:method name="" propagation="" isolation="" timeout="" read-only="" rollback-for="" no-rollback-for="">
                <description>Define bean with class 'org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource' as 'transactionAttributeSource'.
                If not defined 'transactionAttributeSource', replace bean which type is 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource'.</description>
            </tx:method>
        </tx:attributes>
#end
    </tx:advice>
    <tx:jta-transaction-manager>
        <description>Define 'transactionManager' bean.
        Class may be 'org.springframework.transaction.jta.WebLogicJtaTransactionManager' if 'weblogic.transaction.UserTransaction' present.
        Class may be 'org.springframework.transaction.jta.WebSphereUowTransactionManager' if 'com.ibm.wsspi.uow.UOWManager' present.
        Class may be 'org.springframework.transaction.jta.OC4JJtaTransactionManager' if 'oracle.j2ee.transaction.OC4JTransactionManager' present.
        Otherwise use 'org.springframework.transaction.jta.JtaTransactionManager'.</description>
    </tx:jta-transaction-manager>
    -->
#end
#if($framework.contains('jpa'))
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
#if($showDefault)
        <property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml" />
#end
        <property name="packagesToScan" value="${groupId}.${artifactId}" />
        <property name="#if($framework.contains('jta'))jtaDataSource#{else}dataSource#{end}" ref="${dataSource}" />
        <!--<property name="mappingResources" value="${spring.jpa.mappingResources}" />-->
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter" />
    </bean>
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="showSql" value="${spring.jpa.showSql}" />
        <property name="database" value="${spring.jpa.database}" />
        <property name="databasePlatform" value="${spring.jpa.databasePlatform}" />
        <property name="generateDdl" value="${spring.jpa.generateDdl}" />
    </bean>
#end
#if($framework.contains('jta'))
    <bean id="jtaTransactionManager" class="#if($container.contains('weblogic'))org.springframework.transaction.jta.WebLogicJtaTransactionManager#elseif($container.contains('websphere'))org.springframework.transaction.jta.WebSphereUowTransactionManager#{else}org.springframework.transaction.jta.JtaTransactionManager#end">
#if($showComment)
        <description>This transaction manager is appropriate for handling distributed transactions, i.e. transactions that span multiple resources.</description>
#end
        <property name="transactionManagerName" value="transactionManager" />
#if($showDefault)
        <property name="autodetectUserTransaction" value="true" />
        <property name="cacheUserTransaction" value="true" />
        <property name="autodetectTransactionManager" value="#if($container.contains('websphere'))false#{else}true#{end}" />
        <property name="allowCustomIsolationLevels" value="false" />
#end
    </bean>
#else
    <bean id="transactionManager" class="#if($framework.contains('hibernate'))org.springframework.orm.hibernate4.HibernateTransactionManager#{else}org.springframework.jdbc.datasource.DataSourceTransactionManager#{end}">
#if($showComment)
        <description>As transaction manager for single resource, delegate connection to commit or rollback.</description>
#end
        <property name="dataSource" ref="${dataSource}" />
#if($showDefault)
#if($framework.contains('hibernate'))
        <property name="sessionFactory" ref="${sessionFactory}" />
        <property name="autodetectDataSource" value="true" />
        <property name="prepareConnection" value="true" />
        <property name="hibernateManagedSession" value="false" />
#else
        <property name="nestedTransactionAllowed" value="false" />
        <property name="validateExistingTransaction" value="false" />
        <property name="globalRollbackOnParticipationFailure" value="true" />
        <property name="failEarlyOnGlobalRollbackOnly" value="false" />
        <property name="rollbackOnCommitFailure" value="false" />
#end
#end
    </bean>
#end
    <bean id="${dataSource}" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
#if($showComment)
        <description>A pooled dataSource better than dbcp and c3p0.
        ExceptionSorter can auto remove invalid connection.
        WallFilter can avoid sql injection.</description>
#end
        <property name="driverClassName" value="${spring.datasource.driverClassName}" />
        <property name="url" value="${spring.datasource.url}" />
        <property name="username" value="${spring.datasource.username}" />
        <property name="password" value="${spring.datasource.password}" />
        <property name="filters" value="stat,slf4j,wall" />
        <property name="maxActive" value="${spring.datasource.druid.maxActive}" />
        <property name="initialSize" value="${spring.datasource.druid.initialSize}" />
        <property name="maxWait" value="${spring.datasource.druid.maxWait}" />
        <property name="minIdle" value="${spring.datasource.druid.minIdle}" />
        <property name="validationQuery" value="${spring.datasource.validationQuery}" />
        <property name="connectionProperties" value="${spring.datasource.druid.connectProperties}" />
    </bean>
#if($framework.contains('mybatis') and $framework.contains('spring'))
    <bean id="${sqlSessionFactory}" class="org.mybatis.spring.SqlSessionFactoryBean">
#if($showComment)
        <description>Build SqlSessionFactory by parse configuration and mapper.
        A SqlSessionFactory can open SqlSession. A SqlSession can execute sql command.</description>
#end
        <property name="configLocation" value="${mybatis.configLocation}" />
        <property name="mapperLocations" value="${mybatis.mapperLocations}" />
        <property name="dataSource" ref="${dataSource}" />
    </bean>
#if($configType.contains('@'))
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
#if($showComment)
        <description>Scan 'basePackage' and register bean definitions by using 'annotationClass' and 'markerInterface' as include filters</description>
#end
        <property name="annotationClass" value="org.springframework.stereotype.Repository" />
        <property name="basePackage" value="${groupId}.${rootArtifactId}.dao" />
        <property name="markerInterface" value="org.apache.ibatis.annotations.Mapper" />
        <property name="sqlSessionFactoryBeanName" value="${sqlSessionFactory}" />
    </bean>
#end
#end
#if($framework.contains('hibernate'))
    <bean id="${sessionFactory}" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="${dataSource}" />
        <!--<property name="configLocations" value="classpath:hibernate.cfg.xml" />-->
    </bean>
#end
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor">
#if($showComment)
        <description>Translates native resource exceptions to Spring's DataAccessException</description>
#end
#if($showDefault)
        <property name="proxyTargetClass" value="false" />
        <property name="repositoryAnnotationType" value="org.springframework.stereotype.Repository" />
        <property name="beforeExistingAdvisors" value="false" />
#end
    </bean>
#if($configType.contains('xml:') and $configType.contains('@'))
#if($showComment)
    <!--
    1.proxy:
    Register bean which type is 'org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator' if necessary.
    If not defined bean of type 'org.springframework.transaction.config.internalTransactionAdvisor', defines sunch beans:
    bean of type 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource',
    advice bean which type is 'org.springframework.transaction.interceptor.TransactionInterceptor',
    advisor bean which named 'org.springframework.transaction.config.internalTransactionAdvisor' and type is 'org.springframework.transaction.interceptor.BeanFactoryTransactionAttributeSourceAdvisor',.
    2.aspectj:
    Define factory bean named 'org.springframework.transaction.config.internalTransactionAspect'
    which type is 'org.springframework.transaction.aspectj.AnnotationTransactionAspect', factory method named 'aspectOf'.
    It's property 'transactionManagerBeanName' refer to bean 'transactionManager'.
    -->
#{end}
    <tx:annotation-driven #if($showDefault)mode="proxy" transaction-manager="transactionManager"#{end} />
#end

#if($showComment)
    <!--
    <cache:advice cache-manager="cacheManager">
        <description>Define bean type is 'org.springframework.cache.interceptor.CacheInterceptor'.
        It's property 'cacheOperationSources' refer to bean of type 'org.springframework.cache.interceptor.NameMatchCacheOperationSource' if '&#60;cache:caching&#62;',
        otherwise replace with type 'org.springframework.cache.annotation.AnnotationCacheOperationSource'</description>
        <cache:caching>
            <cache:cacheable unless=""></cache:cacheable>
            <cache:cache-evict all-entries="false"></cache:cache-evict>
            <cache:cache-put unless=""></cache:cache-put>
        </cache:caching>
    </cache:advice>
    -->
#end
#if($showComment)
    <!--
    1.proxy:
    Register bean which type is 'org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator' if necessary.
    If not defined bean 'org.springframework.cache.config.internalCacheAdvisor', define such beans:
    bean type is 'org.springframework.cache.annotation.AnnotationCacheOperationSource',
    interceptor type is 'org.springframework.cache.interceptor.CacheInterceptor',
    advisor named 'org.springframework.cache.config.internalCacheAdvisor' and type is 'org.springframework.cache.interceptor.BeanFactoryCacheOperationSourceAdvisor'
    2.aspectj:
    Define bean named 'org.springframework.cache.config.internalCacheAspect',
    which type is 'org.springframework.cache.aspectj.AnnotationCacheAspect', factory-method named 'aspectOf'.
    It's property 'cacheManager' refers to bean 'cacheManager'.
    -->
#{end}
#if($configType.contains('xml:') and $configType.contains('@'))
    <cache:annotation-driven #if($showDefault)mode="proxy" cache-manager="cacheManager"#{end} />
    <bean id="cacheManager" class="org.springframework.cache.support.CompositeCacheManager">
        <property name="fallbackToNoOpCache" value="true" />
        <!--
        <property name="cacheManagers">
            <list>
                <ref bean="" />
            </list>
        </property>
        -->
    </bean>
#end
#if($framework.contains('rabbitmq'))
    <bean id="rabbitConnectionFactory" class="org.springframework.amqp.rabbit.connection.CachingConnectionFactory">
        <constructor-arg type="com.rabbitmq.client.ConnectionFactory">
            <bean class="org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean">
                <property name="host" value="${spring.rabbitmq.host}" />
                <property name="port" value="${spring.rabbitmq.port}" />
                <property name="username" value="${spring.rabbitmq.username}" />
                <property name="password" value="${spring.rabbitmq.password}" />
                <property name="virtualHost" value="${spring.rabbitmq.virtualHost}" />
            </bean>
        </constructor-arg>
#if($showDefault)
        <property name="channelCheckoutTimeout" value="${spring.rabbitmq.cache.channel.checkoutTimeout}" />
        <property name="cacheMode" value="${spring.rabbitmq.cache.connection.mode}" />
        <property name="channelCacheSize" value="${spring.rabbitmq.cache.channel.size}" />
        <property name="connectionCacheSize" value="${spring.rabbitmq.cache.connection.size}" />
#end
    </bean>
    <bean id="rabbitListenerContainerFactory" class="org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory">
        <property name="connectionFactory" ref="rabbitConnectionFactory" />
    </bean>
#if($configType.contains('xml') and !$configType.contains('xml:') and !$configType.contains('@'))
    <bean id="${amqpAdmin}" class="org.springframework.amqp.rabbit.core.RabbitAdmin">
        <constructor-arg index="0" type="org.springframework.amqp.rabbit.connection.ConnectionFactory" ref="rabbitConnectionFactory" />
#if($showDefault)
        <property name="autoStartup" value="true" />
        <property name="taskExecutor">
            <bean class="org.springframework.core.task.SimpleAsyncTaskExecutor" />
        </property>
#end
    </bean>

    <bean id="rabbitTemplate" class="org.springframework.amqp.rabbit.core.RabbitTemplate">
#if($showDefault)
        <property name="exchange" value="${spring.rabbitmq.template.exchange}" />
        <property name="routingKey" value="${spring.rabbitmq.template.routingKey}" />
        <property name="receiveTimeout" value="${spring.rabbitmq.template.receiveTimeout}" />
        <property name="replyTimeout" value="${spring.rabbitmq.template.replyTimeout}" />
        <property name="messageConverter" ref="${rabbitMessageConverter}" />
        <property name="messagePropertiesConverter">
            <bean class="org.springframework.amqp.rabbit.support.DefaultMessagePropertiesConverter" />
        </property>
        <property name="encoding" value="UTF-8" />
#end
        <property name="connectionFactory" ref="rabbitConnectionFactory" />
    </bean>
    <bean class="org.springframework.amqp.rabbit.core.RabbitMessagingTemplate">
        <property name="rabbitTemplate" ref="rabbitTemplate" />
#if($showDefault)
        <property name="amqpMessageConverter">
            <bean class="org.springframework.amqp.support.converter.MessagingMessageConverter" />
        </property>
#end
    </bean>

#if($showDefault)
    <bean id="${rabbitMessageConverter}" class="org.springframework.amqp.support.converter.SimpleMessageConverter" #if(!$showComment)/>#{else}
        <description>According message property named contentType, convert message body to suitable object</description>
    </bean>#{end}
#**
 * Defined exchanges: amq.direct, amq.fanout, amq.headers, amq.match, amq.rabbitmqtrace, amq.topic.
 * An exchange can be bound multi queue, whether delivery to this queue depends on type of exchange.
 * If exchange type is direct, routingKey must be same. If exchange type is fanout, queues bound match.
 * If exchange type is topic, pattern match. If exchange type is headers, message header matches queue argument.
 *#
    <bean class="org.springframework.amqp.core.FanoutExchange">
        <constructor-arg index="0" value="amq.fanout" />
        <constructor-arg index="1" value="true" />
        <constructor-arg index="2" value="false" />
    </bean>
    <bean class="org.springframework.amqp.rabbit.config.BindingFactoryBean">
#if($showComment)
        <description>exchange can bind to queue or another exchange.
        If exchange type is direct or topic, please specify routingKey!
        If exchange type is headers, please specify arguments!</description>
#end
        <property name="exchange" value="amq.fanout" />
        <property name="destinationQueue" ref="${queueName}" />
    </bean>
#end

    <bean id="${queueName}" class="org.springframework.amqp.core.Queue">
        <constructor-arg index="0" value="${queueName}" />
#if($showDefault)
        <constructor-arg index="1" value="true" />
        <constructor-arg index="2" value="false" />
        <constructor-arg index="3" value="false" />
#end
    </bean>
    <bean factory-bean="rabbitListenerContainerFactory" factory-method="createListenerContainer">
        <property name="messageListener" ref="${rabbitListener}" />
        <property name="queueNames" value="${queueName}">
    </bean>
#*
    <bean class="org.springframework.amqp.rabbit.config.ListenerContainerFactoryBean">
#if($showComment)
        <description>create 'org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer' by default,
            or 'org.springframework.amqp.rabbit.listener.DirectMessageListenerContainer' if specify 'type' as 'direct'</description>
#end
#if($showDefault)
        <property name="type" value="${spring.rabbitmq.listener.type}" />
        <property name="missingQueuesFatal" value="${spring.rabbitmq.listener.simple.missingQueuesFatal}" />
#end
        <property name="connectionFactory" ref="rabbitConnectionFactory" />
        <property name="messageListener" ref="${rabbitListener}" />
        <property name="queues">
            <description>queue has bound to exchanges</description>
            <array>
                <ref bean="${queueName}" />
            </array>
        </property>
    </bean>
*#
    <bean id="${rabbitListener}" class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">
#if($showComment)
        <description>Convert org.springframework.amqp.core.Message to Object[].
            Adapt to org.springframework.amqp.core.MessageListener by invoke 'handleMessage' of delegate.</description>
#end
#if($showDefault)
        <property name="responseRoutingKey" value="" />
        <property name="messageConverter" ref="${rabbitMessageConverter}" />
        <property name="encoding" value="UTF-8" />
        <property name="defaultRequeueRejected" value="true" />

        <property name="defaultListenerMethod" value="handleMessage" />
#end
        <property name="delegate" ref="" />
    </bean>
#elseif($configType.contains('xml') and $configType.contains('xml:') and !$configType.contains('@'))
    <rabbit:connection-factory id="rabbitConnectionFactory"
                               host="${spring.rabbitmq.host}" port="${spring.rabbitmq.port}"
                               username="${spring.rabbitmq.username}" password="${spring.rabbitmq.password}"
                               virtual-host="${spring.rabbitmq.virtualHost}"/>
    <rabbit:admin connection-factory="rabbitConnectionFactory" #if($showDefault)auto-startup="true" #{end}/>

    <rabbit:template id="rabbitTemplate" connection-factory="rabbitConnectionFactory" exchange="" routing-key=""/>

    <rabbit:queue name="${queueName}" #if($showDefault)durable="false" auto-delete="false" exclusive="false" #{end}/>
#if($showComment)
    <!-- Define list of org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter -->
#end
    <rabbit:listener-container #if($showDefault)connection-factory="rabbitConnectionFactory" #{end}>
        <rabbit:listener queue-names="${queueName}" ref="${rabbitListener}" />
    </rabbit:listener-container>
#elseif($configType.contains('xml') and $configType.contains('xml:') and $configType.contains('@'))
#if($showComment)
    <!--
    Handle annotation such as @RabbitListener(queues = {}/*,bindings = {@QueueBinding(exchange = @Exchange)}, queuesToDeclare = {@Queue(arguments = {@Argument})}*/), @RabbitHandler.
    Define bean named 'org.springframework.amqp.rabbit.config.internalRabbitListenerAnnotationProcessor',
    which type is 'org.springframework.amqp.rabbit.annotation.RabbitListenerAnnotationBeanPostProcessor'.
    Property 'endpointRegistry' has default value, bean named 'org.springframework.amqp.rabbit.config.internalRabbitListenerEndpointRegistry',
    and type is 'org.springframework.amqp.rabbit.listener.RabbitListenerEndpointRegistry'.
    Property 'containerFactoryBeanName' has default value 'rabbitListenerContainerFactory'.
    -->
#end
    <rabbit:annotation-driven #if($showDefault)container-factory="rabbitListenerContainerFactory" #{end}/>

#end
#end
#if($framework.contains('quartz'))
    <bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="jobFactory" ref="jobFactory" />
        <property name="beanName" value="${spring.quartz.schedulerName}" />
        <property name="autoStartup" value="${spring.quartz.autoStartup}" />
        <property name="startupDelay" value="${spring.quartz.startupDelay}" />
        <property name="overwriteExistingJobs" value="${spring.quartz.overwriteExistingJobs}" />
    </bean>
#end

#**
 * keep &#60;beans profile="" /&#62;at the end of file!
 *#
#if($configType.contains('xml:') or ($configType.contains('@') and !$configType.contains('@java')))
#if(!$showComment)    <!-- Define org.springframework.context.support.PropertySourcesPlaceholderConfigurer -->#{end}
    <beans profile="default">
        <context:property-placeholder location="classpath:/application.properties" file-encoding="UTF-8"
            #if($showDefault)local-override="false" order="2147483647" ignore-unresolvable="false" system-properties-mode="ENVIRONMENT"#{end} />
    </beans>
    <beans profile="dev">
        <context:property-placeholder location="classpath:/application.properties,classpath:/application-dev.properties" file-encoding="UTF-8"
            #if($showDefault)local-override="false" order="2147483647" ignore-unresolvable="false" system-properties-mode="ENVIRONMENT"#{end} />
    </beans>
    <beans profile="test">
        <context:property-placeholder location="classpath:/application.properties,classpath:/application-test.properties" file-encoding="UTF-8"
            #if($showDefault)local-override="false" order="2147483647" ignore-unresolvable="false" system-properties-mode="ENVIRONMENT"#{end} />
    </beans>
    <beans profile="prod">
        <context:property-placeholder location="classpath:/application.properties,classpath:/application-prod.properties" file-encoding="UTF-8"
            #if($showDefault)local-override="false" order="2147483647" ignore-unresolvable="false" system-properties-mode="ENVIRONMENT"#{end} />
    </beans>
#end
</beans>