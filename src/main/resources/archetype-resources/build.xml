<?xml version="1.0" encoding="UTF-8"?>
<project name="temp" basedir="." default="help"
         xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:jacoco="antlib:org.jacoco.ant"
         xmlns:sonar="antlib:org.sonar.ant">
#if($showComment)
    <!-- mvn ant:ant generate build.xml! Please refer http://maven.apache.org/plugins/maven-ant-plugin/index.html -->
    <!-- SeeAlso: http://maven.apache.org/ref/3.6.2/maven-core/lifecycles.html -->
    <!-- SeeAlso: https://maven.apache.org/ref/3.6.2/maven-core/default-bindings.html -->

    <!-- SeeAlso: https://ant.apache.org/ivy/history/2.5.0/ant.html -->
#end
    <property environment="env"/>
    <property file="${basedir}/build.properties" />
    <property file="${basedir}/sonar-project.properties" />

    <path id="build.classpath">
        <pathelement location="${settings.localRepository}/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar"/>
        <pathelement location="${settings.localRepository}/org/projectlombok/lombok/1.16.20/lombok-1.16.20.jar"/>
    </path>
    <path id="build.test.classpath">
        <pathelement location="${settings.localRepository}/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar"/>
        <pathelement location="${settings.localRepository}/org/projectlombok/lombok/1.16.20/lombok-1.16.20.jar"/>
        <pathelement location="${settings.localRepository}/junit/junit/4.12/junit-4.12.jar"/>
        <pathelement location="${settings.localRepository}/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
        <pathelement location="${settings.localRepository}/org/mockito/mockito-core/2.27.0/mockito-core-2.27.0.jar"/>
        <pathelement location="${settings.localRepository}/net/bytebuddy/byte-buddy/1.9.10/byte-buddy-1.9.10.jar"/>
        <pathelement location="${settings.localRepository}/net/bytebuddy/byte-buddy-agent/1.9.10/byte-buddy-agent-1.9.10.jar"/>
        <pathelement location="${settings.localRepository}/org/objenesis/objenesis/2.6/objenesis-2.6.jar"/>
    </path>

    <path id="antlib">
        <fileset dir="${settings.localRepository}/org/jacoco/org.jacoco.ant/0.8.5">
            <include name="org.jacoco.ant-0.8.5.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/org/jacoco/org.jacoco.report/0.8.7">
            <include name="org.jacoco.report-0.8.7.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/org/jacoco/org.jacoco.core/0.8.7">
            <include name="org.jacoco.core-0.8.7.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/org/jacoco/org.jacoco.agent/0.8.7">
            <include name="org.jacoco.agent-0.8.7.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/org/sonarsource/scanner/ant/sonarqube-ant-task/2.5">
            <include name="sonarqube-ant-task-2.5.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/com/puppycrawl/tools/checkstyle/8.19">
            <include name="checkstyle-8.19.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/net/sourceforge/pmd/pmd-core/6.13.0">
            <include name="pmd-core-6.13.0.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/edu/umd/cs/findbugs/3.0.1">
            <include name="fundbugs-ant.jar" />
        </fileset>
        <fileset dir="${settings.localRepository}/org/testng/testng/7.6.1">
            <include name="testng-7.6.1.jar" />
        </fileset>
    </path>

    <target name="help">
        <echo message="Please run: $ant -projecthelp" />
    </target>
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath refid="antlib" />
    </taskdef>
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
        <classpath refid="antlib" />
    </taskdef>
    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="antlib" />
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="antlib" />
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="antlib" />
    <taskdef resource="edu/umd/cs/findbugs/anttask/tasks.properties" classpathref="antlib" />
    <taskdef resource="tesngtasks" classpathref="antlib" />

#if($showComment)
    <!-- clean lifecycyle -->
#end
    <target name="pre-clean">
        <tstamp />
    </target>
    <target name="clean" depends="pre-clean" description="maven-clean-plugin:clean" unless="maven.clean.skip">
#if($packagingType=="pom")
        <ant #if($showDefault)antfile="build.xml" inheritAll="true" inheritRefs="false" useNativeBasedir="false" #{end}dir="${rootArtifactId}-api" target="clean" />
        <ant antfile="build.xml" dir="${rootArtifactId}-domain" target="clean" />
        <ant antfile="build.xml" dir="${rootArtifactId}-app" target="clean" />
#end
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="${project.build.outputDirectory}" />
            <fileset dir="${project.build.testOutputDirectory}" />
            <fileset dir="${projetc.reporting.outputDirectory}" />
            <fileset dir="${project.build.directory}" />
        </delete>
    </target>
    <target name="post-clean" depends="clean">
        <ivy:cleancache />
        <tstamp />
        <echo message="clean success" />
    </target>


#if($showComment)
    <!-- default lifecycle -->
#end
    <target name="validate">

    </target>
    <target name="initialize" depends="validate" description="jacoco-maven-plugin:prepare-agent">
        <mkdir dir="${project.build.directory}" />
        <mkdir dir="${project.build.outputDirectory}" />
        <mkdir dir="${project.build.testOutputDirectory}" />
        <mkdir dir="${projetc.reporting.outputDirectory}" />
        <ivy:retrieve pattern="${settings.localRepository}/[orgPath]/[artifact]/[revision]/[artifact]-[revision].[ext]" #if($showDefault)sync="false" #{end}/>
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="initialize" />
        <ant dir="${rootArtifactId}-domain" target="initialize" />
        <ant dir="${rootArtifactId}-app" target="initialize" />
#else
        <jacoco:agent enabled="${jacoco.skip}" property="${jacoco.propertyName}" />
#end
    </target>
    <target name="generate-sources" depends="initialize">

    </target>
    <target name="process-sources" depends="generate-sources">

    </target>
    <target name="generate-resources" description="jacoco-maven-plugin:merge maven-ear-plugin:generate-application-xml">
        <copy file="${project.resources}/**" todir="${project.build.outputDirectory}" />
        <!--<jacoco:merge destfile="${jacoco.destFile}">-->
            <!--<fileset dir="${project.build.directory}" includes="*.exec"/>-->
        <!--</jacoco:merge>-->
    </target>
    <target name="process-resources" depends="generate-resources" description="maven-resources-plugin:resources"
            unless="maven.resources.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="process-resources" />
        <ant dir="${rootArtifactId}-domain" target="process-resources" />
        <ant dir="${rootArtifactId}-app" target="process-resources" />
#else
        <native2ascii src="${project.resources}" dest="${project.build.outputDirectory}" includes="**/*" ext="properties" />
#end
    </target>
    <target name="compile" depends="process-sources,process-resources" description="maven-compiler-plugin:compile"
            unless="maven.main.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="compile" />
        <ant dir="${rootArtifactId}-domain" target="compile" />
        <ant dir="${rootArtifactId}-app" target="compile" />
#else
        <mkdir dir="${project.build.outputDirectory}" />
        <javac destdir="${project.build.outputDirectory}"
               source="${maven.compiler.source}" target="${maven.compiler.target}" encoding="${project.build.sourceEncoding}"
               debug="${maven.compiler.debug}" optimize="${maven.compiler.optimize}" failonerror="${maven.compiler.failOnError}"
               memoryinitialsize="${maven.compiler.meminitial}" memorymaximumsize="${maven.compiler.maxmem}"
               fork="${maven.compiler.fork}" deprecation="${maven.compiler.showDeprecation}" verbose="${maven.compiler.verbose}">
            <src>
                <pathelement location="${project.build.sourceDirectory}" />
            </src>
            <classpath refid="build.classpath"/>
        </javac>
        <copy todir="${project.build.outputDirectory}">
            <fileset dir="${project.resources}" />
        </copy>
#end
    </target>
    <target name="process-classes" depends="compile" description="jacoco-maven-plugin:instrucment">
        <!--<jacoco:instrument destdir="">-->
            <!--<fileset dir="${project.build.outputDirectory}" includes="**/*.class" />-->
        <!--</jacoco:instrument>-->
    </target>
    <target name="generate-test-sources">

    </target>
    <target name="process-test-sources" depends="generate-test-sources">

    </target>
    <target name="generate-test-resources">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="generate-test-resources" />
        <ant dir="${rootArtifactId}-domain" target="generate-test-resources" />
        <ant dir="${rootArtifactId}-app" target="generate-test-resources" />
#else
        <copy file="${project.testResources}/**" todir="${project.build.testOutputDirectory}" />
#end
    </target>
    <target name="process-test-resources" depends="generate-test-resources" unless="maven.test.skip"
            description="maven-resources-plugin:testResources">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="process-test-resources" />
        <ant dir="${rootArtifactId}-domain" target="process-test-resources" />
        <ant dir="${rootArtifactId}-app" target="process-test-resources" />
#else
        <native2ascii src="${project.testResources}" dest="${project.build.testOutputDirectory}" includes="**/*" ext="properties" />
#end
    </target>
    <target name="test-compile" depends="compile, process-test-sources, process-test-resources"
            description="maven-compiler-plugin:testCompile" unless="maven.test.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="test-compile" />
        <ant dir="${rootArtifactId}-domain" target="test-compile" />
        <ant dir="${rootArtifactId}-app" target="test-compile" />
#else
        <mkdir dir="${project.build.testOutputDirectory}" />
        <javac destdir="${project.build.testOutputDirectory}"
               source="${maven.compiler.source}" target="${maven.compiler.target}" encoding="${project.build.sourceEncoding}"
               debug="${maven.compiler.debug}" optimize="${maven.compiler.optimize}" failonerror="${maven.compiler.failOnError}"
               memoryinitialsize="${maven.compiler.meminitial}" memorymaximumsize="${maven.compiler.maxmem}"
               fork="${maven.compiler.fork}" deprecation="${maven.compiler.showDeprecation}" verbose="${maven.compiler.verbose}">
            <src>
                <pathelement location="${project.build.testSourceDirectory}" />
            </src>
            <classpath>
                <path refid="build.test.classpath" />
                <pathelement location="${project.build.outputDirectory}" />
            </classpath>
        </javac>
        <copy todir="${project.build.testOutputDirectory}">
            <fileset dir="${project.testResources}" />
        </copy>
#end
    </target>
    <target name="process-test-classes" depends="test-compile">

    </target>
    <target name="test" depends="process-test-classes" description="maven-surefire-plugin:test" unless="skipTests || maven.test.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="test" />
        <ant dir="${rootArtifactId}-domain" target="test" />
        <ant dir="${rootArtifactId}-app" target="test" />
#else
        <mkdir dir="${project.build.directory}/surefire-reports" />
        <junit printsummary="${surefire.printSummary}" haltonerror="off" haltonfailure="off" fork="off"
            jvm="java" newenvironment="false" includeantruntime="true">
            <jvmarg />
            <sysproperty key="basedir" value="${basedir}" />
            <assertions>
                <enable />
                <disable package="java" />
                <disable package="javax" />
                <disable package="org.apache" />
                <disable package="org.springframework" />
            </assertions>
            <formatter type="${surefire.reportFormat}" usefile="${surefire.useFile}" />
            <formatter type="xml" />
            <formatter type="plain" usefile="false" />
            <classpath>
                <path refid="build.test.classpath" />
                <pathelement location="${project.build.outputDirectory}" />
                <pathelement location="${project.build.testOutputDirectory}" />
            </classpath>
            <batchtest todir="${project.build.directory}/surefire-reports" unless="test">
                <fileset dir="${project.build.testSourceDirectory}">
                    <include name="**/*Test.java" />
                    <exclude name="**/Abstract*.java" />
                    <exclude name="**/*Base.java" />
                </fileset>
            </batchtest>
            <batchtest todir="${project.build.directory}/surefire-reports" if="test">
                <fileset dir="${project.build.testSourceDirectory}">
                    <include name="${test}.java" />
                    <exclude name="**/Abstract*.java" />
                    <exclude name="**/*Base.java" />
                </fileset>
            </batchtest>
        </junit>
        <sonar:sonar />
#end
    </target>
    <target name="prepare-package" depends="compile, test" description="jacoco-maven-plugin:restore-instrucmented-classes">
        <!-- jacoco:restore-instrumented-classes -->
    </target>
    <target name="package" depends="prepare-package"
            description="maven-war-plugin:war maven-jar-plugin:jar maven-ejb-plugin:ejb maven-ear-plugin:ear"
            unless="maven.war.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="package" />
        <ant dir="${rootArtifactId}-domain" target="package" />
        <ant dir="${rootArtifactId}-app" target="package" />
#else
        <!--<javadoc />-->
        <jar destfile="${project.build.finalName}.jar" includes="**/**" excludes="**/package.html">
            <manifest file="MANIFEST.MF">
                <attribute name="Manifest-Version" value="" />
                <attribute name="Signature-Version" value="" />
                <attribute name="Content-Type" value="" />
                <attribute name="Class-Path" value="" />
                <attribute name="Main-Class" value="" />
                <attribute name="Sealed" value="false" />
                <attribute name="Extension-List" value="" />
                <attribute name="Extension-Name" value="" />
                <attribute name="Extension-Installation" value="" />
                <attribute name="Implementation-Title" value="" />
                <attribute name="Implementation-Version" value="" />
                <attribute name="Implementation-Vendor" value="" />
                <attribute name="Implementation-Vendor-Id" value="" />
                <attribute name="Implementation-URL" value="" />
                <attribute name="Specification-Title" value="" />
                <attribute name="Specification-Version" value="" />
                <attribute name="Specification-Vendor" value="" />

                <attribute name="Premain-Class" value="" />
                <attribute name="Agent-Class" value="" />
                <attribute name="Boot-Class-Path" value="" />
                <attribute name="Can-Redefine-Classes" value="FALSE" />
                <attribute name="Can-Retransform-Classes" value="False" />
                <attribute name="Can-Set-Native-Method-Prefix" value="false" />

                <attribute name="Build-Jdk" value="" />
                <attribute name="Bundle-Version" value="" />
                <attribute name="Bundle-License" value="" />
                <attribute name="Import-Package" value="" />
                <attribute name="Export-Package" value="" />
            </manifest>
            <!--<service type="">
                <provider classname="" />
            </service>-->
        </jar>
        <copy file="${settings.localRepository}/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar"
              todir="${project.build.director}/${project.build.finalName}/WEB-INF/lib"/>
        <war encoding="${project.build.sourceEncoding}" includes="**" whenmanifestonly="create"
             webxml="${project.basedir}/src/main/webapp/WEB-INF/web.xml"
             destfile="${project.build.director}/${project.build.finalName}-${project.version}.war">
            <lib>${project.build.director}/${project.build.finalName}/WEB-INF/lib</lib>
            <classes>${project.build.outputDirectory}</classes>
            <fileset dir="${tomcat.warSourceDirectory}" excludes="WEB-INF/web.xml" />
        </war>
#end
    </target>
    <target name="pre-integration-test" description="jacoco-maven-plugin:prepare-agent-integration">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="pre-integration-test" />
        <ant dir="${rootArtifactId}-domain" target="pre-integration-test" />
        <ant dir="${rootArtifactId}-app" target="pre-integration-test" />
#else
        <jacoco:agent enabled="${jacoco.skip}" property="${jacoco.propertyName}" />
#end
    </target>
    <target name="integration-test" depends="pre-integration-test">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="integration-test" />
        <ant dir="${rootArtifactId}-domain" target="integration-test" />
        <ant dir="${rootArtifactId}-app" target="integration-test" />
#else
        <jacoco:coverage enabled="true" destfile="${project.build.directory}/jacoco-it.exec" append="true" includes="*"
                         exclclassloader="sun.reflect.DelegatingClassLoader" inclbootstrapclasses="false" jmx="false"
                         inclnolocationclasses="false" dumponexit="true" output="file" address="127.0.0.1" port="6300">
            <testng fork="true" forkmode="once" mode="testng" classpathref="antlib" xmlPathInJar="testng.xml">
                <classfileset dir="${project.build.testOutputDirectory}" includes="**/*Test.class" />
            </testng>
        </jacoco:coverage>
#end
    </target>
    <target name="post-integration-test" depends="integration-test" description="jacoco-maven-plugin:dump">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="post-integration-test" />
        <ant dir="${rootArtifactId}-domain" target="post-integration-test" />
        <ant dir="${rootArtifactId}-app" target="post-integration-test" />
#else
        <jacoco:dump destfile="${jacoco.destFile}" address="${jacoco.address}" port="${jacoco.port}"
                     retryCount="${jacoco.retryCount}" dump="${jacoco.dump}" reset="${jacoco.reset}" append="${jacoco.append}" />
#end
    </target>

    <target name="checkstyle-maven-plugin:check" unless="checkstyle.skip">
        <checkstyle config="${checkstyle.config.location}" failOnViolation="${checkstyle.failOnViolation}"
                    maxErrors="0" maxWarnings="2147483647">
            <fileset dir="${project.build.sourceDirectory}" includes="${checkstyle.includes}" />
            <formatter type="${checkstyle.output.format}" toFile="${checkstyle.output.file}" useFile="true" />
        </checkstyle>
    </target>
    <target name="maven-pmd-plugin:cpd-check" unless="cpd.skip">
        <cpd minimumtokencount="100" format="text" outputfile="${project.build.directory}/cpd.xml" language="java"
             ignoreLiterals="${cpd.ignoreLiterals}" ignoreIdentifiers="${cpd.ignoreIdentifiers}" ignoreAnnotations="${cpd.ignoreAnnotations}"
             skipDuplicateFiles="false" skipLexicalErrors="false" />
    </target>
    <target name="maven-pmd-plugin:check" unless="pmd.skip">
        <pmd failOnRuleViolation="${pmd.failOnViolation}" suppressMarker="NOPMD" maxRuleViolations="${pmd.maxAllowedViolations}">
            <formatter type="xml" showSuppressed="false" toFile="${project.build.directory}/pmd.xml" toConsole="false" />
            <sourceLanguage name="java" version="1.8"/>
            <ruleset>rulesets/java/design.xml</ruleset>
            <ruleset>java-basic</ruleset>
        </pmd>
    </target>
    <target name="findbugs-maven-plugin:check" unless="findbugs.skip">
        <echo message="SpotBugs is the spiritual successor of FindBugs" />
        <findbugs home="${findbugs.home}" quietErrors="false" reportLevel="medium" debug="${findbugs.debug}"
                  effort="${findbugs.effort}" timeout="${findbugs.timeout}" failOnError="${findbugs.failOnError}"
                  setExitCode="true" output="xml" outputFile="${project.build.directory}/findbugsXml.xml">
            <!--<class location="${project.build.outputDirectory}" />-->
            <!--<auxClasspath path="${project.build.testOutputDirectory}" />-->
            <!--<sourcePath path="${project.basedir}/src/main/java"/>-->
        </findbugs>
    </target>
    <target name="jacoco-maven-plugin:report" unless="jacoco.skip">
        <jacoco:report>
            <executiondata>
                <file file="${jacoco.dataFile}" />
            </executiondata>
            <structure name="${ant.project.name}">
                <classfiles>
                    <fileset dir="${project.build.outputDirectory}" />
                </classfiles>
                <sourcefiles encoding="${project.build.sourceEncoding}">
                    <fileset dir="${project.build.sourceDirectory}" />
                </sourcefiles>
            </structure>
            <html destdir="${projetc.reporting.outputDirectory}/jacoco" destfile="index.html" encoding="${project.reporting.outputEncoding}" locale="zh_CN" />
            <xml destfile="${projetc.reporting.outputDirectory}/jacoco/jacoco.xml" encoding="${project.reporting.outputEncoding}" />
            <csv destfile="${projetc.reporting.outputDirectory}/jacoco/jacoco.csv" encoding="${project.reporting.outputEncoding}" />
        </jacoco:report>
    </target>
    <target name="jacoco-maven-plugin:report-integration" unless="jacoco.skip">
        <jacoco:report>
            <executiondata>
                <file file="${project.build.directory}/jacoco-it.exec" />
            </executiondata>
            <structure name="${ant.project.name}">
                <classfiles>
                    <fileset dir="${project.build.outputDirectory}" />
                </classfiles>
                <sourcefiles encoding="${project.build.sourceEncoding}">
                    <fileset dir="${project.build.sourceDirectory}" />
                </sourcefiles>
            </structure>
            <xml destfile="${projetc.reporting.outputDirectory}/jacoco/jacoco.xml" encoding="${project.reporting.outputEncoding}" />
        </jacoco:report>
    </target>
    <target name="verify">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="verify" />
        <ant dir="${rootArtifactId}-domain" target="verify" />
        <ant dir="${rootArtifactId}-app" target="verify" />
        <antcall target="checkstyle-maven-plugin:check-aggregator" />
        <antcall target="maven-pmd-plugin:cpd-check">
            <param name="aggregate" value="true" />
        </antcall>
        <antcall target="maven-pmd-plugin:check">
            <param name="aggregate" value="true" />
        </antcall>
        <antcall target="jacoco-maven-plugin:report-aggregator" />
#else
        <antcall target="checkstyle-maven-plugin:check" />
        <antcall target="maven-pmd-plugin:cpd-check" />
        <antcall target="maven-pmd-plugin:check" />
        <antcall target="findbugs-maven-plugin:check" />
        <antcall target="jacoco-maven-plugin:report" />
        <antcall target="jacoco-maven-plugin:report-integration" />
#end
    </target>
    <target name="install" depends="package" description="maven-install-plugin:install" unless="maven.install.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="install" />
        <ant dir="${rootArtifactId}-domain" target="install" />
        <ant dir="${rootArtifactId}-app" target="install" />
#else
        <ivy:publish artifactspattern="${settings.localRepository}/[orgPath]/[artifact]/[revision]/[artifact]-[revision].[ext]"
                     resolver="local"
                     publishivy="false" />
<!--        <mkdir dir="${settings.localRepository}/${groupId}/${rootArtifactId}/${version}" />-->
<!--        <copy file="${project.build.outputDirectory}/${project.build.finalName}.jar" -->
<!--              tofile="${settings.localRepository}/${groupId}/${rootArtifactId}/${version}/${project.build.finalName}.jar" />-->
#end
    </target>
    <target name="deploy" depends="package" description="maven-deploy-plugin:deploy" unless="maven.deploy.skip">
#if($packagingType=="pom")
        <ant dir="${rootArtifactId}-api" target="deploy" />
        <ant dir="${rootArtifactId}-domain" target="deploy" />
        <ant dir="${rootArtifactId}-app" target="deploy" />
#else
        <exec executable="curl">
            <arg value="-F 'filename=@${rootArtifactId}-api/${project.build.directory}/${rootArtifactId}-api-${project.version}.jar'" />
            <arg value="${project.distributionManagement.repository.url}" />
        </exec>
        <serverdeploy action="deploy" source="${project.build.director}/${project.build.finalName}-${project.version}.war">
            <!--<generic classname="" classpath="" username="" password="">-->
                <!--<arg value="" />-->
                <!--<jvmarg />-->
            <!--</generic>-->
#if($container.contains('weblogic'))
            <weblogic application="${ant.project.name}" server="t3://localhost:7001" username="weblogic" password="weblogic"
                      classpath="${env.WL_HOME}/lib/weblogic.jar" />
#else
            <taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpath="${env.CATALINA_HOME}/lib/catalina-ant.jar" />
            <taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpath="${env.CATALINA_HOME}/lib/catalina-ant.jar" />
            <taskdef name="start" classname="org.apache.catalina.ant.StartTask" classpath="${env.CATALINA_HOME}/lib/catalina-ant.jar" />
            <taskdef name="stop" classname="org.apache.catalina.ant.StopTask" classpath="${env.CATALINA_HOME}/lib/catalina-ant.jar" />
            <taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpath="${env.CATALINA_HOME}/lib/catalina-ant.jar" />
            <stop url="${maven.tomcat.url}" username="${tomcat.username}" password="${tomcat.password}" path="${maven.tomcat.path}" />
            <undeploy url="${maven.tomcat.url}" username="${tomcat.username}" password="${tomcat.password}" path="${maven.tomcat.path}" />
            <deploy url="${maven.tomcat.url}" username="${tomcat.username}" password="${tomcat.password}" path="${maven.tomcat.path}"
                    localWar="file:${project.build.director}/${project.build.finalName}-${project.version}.war" />
            <start url="${maven.tomcat.url}" username="${tomcat.username}" password="${tomcat.password}" path="${maven.tomcat.path}" />
#end
        </serverdeploy>
#end
    </target>


#if($showComment)
    <!-- site lifecycle -->
#end
    <target name="pre-site">

    </target>
    <target name="site" depends="pre-site" description="maven-site-plugin:site" unless="maven.site.skip">
        <!--<jjdoc target="${project.basedir}/src/main/site/parser.jj"
        outputfile="${project.build.directory}/site/index.md"
        javacchome="" />-->
    </target>
    <target name="post-site" depends="site">

    </target>
    <target name="site-deploy" description="maven-site-plugin:deploy" unless="maven.site.deploy.skip">

    </target>
</project>